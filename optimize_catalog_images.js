#!/usr/bin/env node

/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞ —Ñ–æ—Ç–æ 1.24 –ì–ë
 * –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç imageMap.ts
 */

const fs = require('fs').promises;
const path = require('path');

const PRODUCTS_DIR = 'client/src/assets/products';
const TEMP_DIR = path.join(PRODUCTS_DIR, 'temp');
const IMAGE_MAP_PATH = path.join(PRODUCTS_DIR, 'imageMap.ts');

// –ö–æ–ª–ª–µ–∫—Ü–∏–∏ –∏ –∏—Ö —Ä—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
const COLLECTIONS = {
  'concrete': ['–ú–∞–≥–∏—è–ë–µ—Ç–æ–Ω–∞', '–ú–∞–≥–∏—è –ë–µ—Ç–æ–Ω–∞', '–ë–µ—Ç–æ–Ω'],
  'matte': ['–ú–∞—Ç–æ–≤–∞—è–≠—Å—Ç–µ—Ç–∏–∫–∞', '–ú–∞—Ç–æ–≤–∞—è', '–ú–∞—Ç–æ–≤–∞—è —ç—Å—Ç–µ—Ç–∏–∫–∞'], 
  'marble': ['–ú—Ä–∞–º–æ—Ä–Ω–∞—è–§–µ–µ—Ä–∏—è', '–ú—Ä–∞–º–æ—Ä–Ω–∞—è', '–ú—Ä–∞–º–æ—Ä'],
  'fabric': ['–¢–∫–∞–Ω–µ–≤–∞—è–†–æ—Å–∫–æ—à—å', '–¢–∫–∞–Ω—å', '–¢–∫–∞–Ω–µ–≤–∞—è']
};

async function processUploadedImages() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–∞—Ç–∞–ª–æ–≥–∞ —Ñ–æ—Ç–æ...');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ temp –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    await fs.access(TEMP_DIR);
    console.log('‚úÖ –ù–∞–π–¥–µ–Ω–∞ –ø–∞–ø–∫–∞ temp —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏');
    
    const files = await fs.readdir(TEMP_DIR);
    const imageFiles = files.filter(file => 
      /\.(jpg|jpeg|png|webp)$/i.test(file)
    );
    
    console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${imageFiles.length}`);
    
    if (imageFiles.length === 0) {
      console.log('‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ temp –ø–∞–ø–∫–µ');
      return;
    }
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–ª–µ–∫—Ü–∏—è–º
    const groupedImages = {};
    
    for (const file of imageFiles) {
      const collection = detectCollection(file);
      const productId = extractProductId(file);
      
      if (collection && productId) {
        if (!groupedImages[collection]) {
          groupedImages[collection] = {};
        }
        if (!groupedImages[collection][productId]) {
          groupedImages[collection][productId] = [];
        }
        groupedImages[collection][productId].push(file);
      }
    }
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é
    let totalProcessed = 0;
    for (const [collection, products] of Object.entries(groupedImages)) {
      console.log(`\nüì¶ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é: ${collection}`);
      
      for (const [productId, files] of Object.entries(products)) {
        console.log(`  üè∑Ô∏è –¢–æ–≤–∞—Ä ${productId}: ${files.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`);
        
        const targetDir = path.join(PRODUCTS_DIR, collection, productId);
        await fs.mkdir(targetDir, { recursive: true });
        
        // –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏
        for (let i = 0; i < files.length; i++) {
          const srcFile = path.join(TEMP_DIR, files[i]);
          const ext = path.extname(files[i]);
          const dstFile = path.join(targetDir, `${productId}-${i + 1}${ext}`);
          
          await fs.copyFile(srcFile, dstFile);
          totalProcessed++;
        }
      }
    }
    
    console.log(`\n‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${totalProcessed}`);
    console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º imageMap.ts...');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º imageMap.ts
    await updateImageMap();
    
    console.log('‚úÖ –ö–∞—Ç–∞–ª–æ–≥ —Ñ–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!');
    console.log('üìù –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—á–∏—Å—Ç–∏—Ç—å temp –ø–∞–ø–∫—É –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏');
    
  } catch (error) {
    if (error.code === 'ENOENT') {
      console.log('üìã –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞...');
      await createUploadStructure();
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:', error.message);
    }
  }
}

function detectCollection(filename) {
  const lowerName = filename.toLowerCase();
  
  for (const [collection, keywords] of Object.entries(COLLECTIONS)) {
    for (const keyword of keywords) {
      if (lowerName.includes(keyword.toLowerCase())) {
        return collection;
      }
    }
  }
  
  // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –Ω–æ–º–µ—Ä—É —Ç–æ–≤–∞—Ä–∞
  if (filename.match(/^89\d{2}/)) return 'concrete';
  if (filename.match(/^90\d{2}/)) return 'matte';
  if (filename.match(/^91\d{2}/)) return 'marble';
  if (filename.match(/^92\d{2}/)) return 'fabric';
  
  return 'concrete'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
}

function extractProductId(filename) {
  // –ò–∑–≤–ª–µ–∫–∞–µ–º 4-–∑–Ω–∞—á–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞
  const match = filename.match(/(\d{4})/);
  return match ? match[1] : null;
}

async function createUploadStructure() {
  const dirs = [
    path.join(PRODUCTS_DIR, 'temp'),
    path.join(PRODUCTS_DIR, 'concrete'),
    path.join(PRODUCTS_DIR, 'matte'), 
    path.join(PRODUCTS_DIR, 'marble'),
    path.join(PRODUCTS_DIR, 'fabric')
  ];
  
  for (const dir of dirs) {
    await fs.mkdir(dir, { recursive: true });
  }
  
  console.log('‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–∑–¥–∞–Ω–∞');
  console.log('üìÅ –ó–∞–≥—Ä—É–∂–∞–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤: client/src/assets/products/temp/');
}

async function updateImageMap() {
  // –ü—Ä–æ—Å—Ç–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ - —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–∞—Ä—É–∂–∏—Ç –Ω–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  console.log('üîÑ imageMap.ts –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã');
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  processUploadedImages().catch(console.error);
}

module.exports = { processUploadedImages };