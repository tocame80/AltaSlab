#!/usr/bin/env node

/**
 * –ë–ï–ó–û–ü–ê–°–ù–û–ï –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å import.meta.dirname –≤ –ø—Ä–æ–¥–∞–∫—à–Ω —Å–±–æ—Ä–∫–µ
 * –¢–æ–ª—å–∫–æ —Ç–æ—á–µ—á–Ω—ã–µ –∑–∞–º–µ–Ω—ã, –±–µ–∑ —à–∏—Ä–æ–∫–∏—Ö —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

// ES modules —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç __dirname
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

function safeFixImportMetaDirname(distPath) {
  const indexJsPath = path.join(distPath, 'index.js');
  
  if (!fs.existsSync(indexJsPath)) {
    console.log('‚ùå –§–∞–π–ª dist/index.js –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return false;
  }

  console.log('üîß –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ import.meta.dirname...');
  
  try {
    let content = fs.readFileSync(indexJsPath, 'utf-8');
    let replacements = 0;
    
    // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    const backupPath = indexJsPath + '.backup';
    if (!fs.existsSync(backupPath)) {
      fs.writeFileSync(backupPath, content, 'utf-8');
      console.log('üíæ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: index.js.backup');
    }
    
    // –¢–û–õ–¨–ö–û –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Ç–æ—á–µ—á–Ω—ã–µ –∑–∞–º–µ–Ω—ã
    const safePatterns = [
      {
        search: /import\.meta\.dirname/g,
        replace: '(__dirname || path.dirname(new URL(import.meta.url).pathname))',
        description: '–ü—Ä—è–º–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ import.meta.dirname'
      }
    ];
    
    safePatterns.forEach(pattern => {
      const matches = content.match(pattern.search);
      if (matches) {
        content = content.replace(pattern.search, pattern.replace);
        replacements += matches.length;
        console.log(`‚úÖ ${pattern.description}: ${matches.length} –∑–∞–º–µ–Ω`);
      }
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±—ã–ª–∏ –∑–∞–º–µ–Ω—ã
    if (replacements > 0) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–µ–Ω –ª–∏ –∏–º–ø–æ—Ä—Ç path
      if (!content.includes('import path from') && !content.includes('const path = require')) {
        content = 'import path from \'path\';\n' + content;
        console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç path');
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–µ–Ω –ª–∏ –∏–º–ø–æ—Ä—Ç URL (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
      if (content.includes('new URL(import.meta.url)') && 
          !content.includes('import { URL }') && !content.includes('const { URL }')) {
        content = 'import { URL } from \'url\';\n' + content;
        console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç URL');
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
      fs.writeFileSync(indexJsPath, content, 'utf-8');
      console.log(`üéâ –£—Å–ø–µ—à–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ ${replacements} –ø—Ä–æ–±–ª–µ–º`);
      
    } else {
      console.log('‚ÑπÔ∏è  –ü—Ä–æ–±–ª–µ–º—ã —Å import.meta.dirname –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }
    
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞:', error.message);
    return false;
  }
}

// –ó–∞–ø—É—Å–∫ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ (ES modules)
const isMainModule = import.meta.url === `file://${process.argv[1]}`;

if (isMainModule) {
  const distPath = process.argv[2] || './dist';
  
  console.log('üöÄ –ë–ï–ó–û–ü–ê–°–ù–û–ï –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ import.meta.dirname –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω');
  console.log(`üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${path.resolve(distPath)}`);
  
  if (safeFixImportMetaDirname(distPath)) {
    console.log('‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
    process.exit(0);
  } else {
    console.log('‚ùå –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å');
    process.exit(1);
  }
}

export { safeFixImportMetaDirname };