#!/usr/bin/env node

/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å import.meta.dirname –≤ –ø—Ä–æ–¥–∞–∫—à–Ω —Å–±–æ—Ä–∫–µ
 * –ó–∞–º–µ–Ω—è–µ—Ç –≤—Å–µ –≤—Ö–æ–∂–¥–µ–Ω–∏—è import.meta.dirname –Ω–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π –∫–æ–¥
 */

const fs = require('fs');
const path = require('path');

function fixImportMetaDirname(distPath) {
  const indexJsPath = path.join(distPath, 'index.js');
  
  if (!fs.existsSync(indexJsPath)) {
    console.log('‚ùå –§–∞–π–ª dist/index.js –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return false;
  }

  console.log('üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—É —Å import.meta.dirname...');
  
  try {
    let content = fs.readFileSync(indexJsPath, 'utf-8');
    
    // –°—á–µ—Ç—á–∏–∫ –∑–∞–º–µ–Ω
    let replacements = 0;
    
    // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∑–∞–º–µ–Ω—ã import.meta.dirname
    const patterns = [
      // –ü—Ä—è–º–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ import.meta.dirname
      {
        search: /import\.meta\.dirname/g,
        replace: '(__dirname || path.dirname(new URL(import.meta.url).pathname))',
        description: 'import.meta.dirname -> —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π __dirname'
      },
      
      // path.resolve(import.meta.dirname, ...)
      {
        search: /path\.resolve\(\s*import\.meta\.dirname\s*,([^)]+)\)/g,
        replace: 'path.resolve(__dirname || path.dirname(new URL(import.meta.url).pathname), $1)',
        description: 'path.resolve —Å import.meta.dirname'
      },
      
      // –í–∞—Ä–∏–∞–Ω—Ç –¥–ª—è —Å–ª—É—á–∞–µ–≤ –≥–¥–µ dirname —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω
      {
        search: /path\.dirname\(fileURLToPath\(import\.meta\.url\)\)/g,
        replace: '(__dirname || path.dirname(new URL(import.meta.url).pathname))',
        description: '—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π ES modules __dirname fallback'
      }
    ];
    
    patterns.forEach(pattern => {
      const matches = content.match(pattern.search);
      if (matches) {
        content = content.replace(pattern.search, pattern.replace);
        replacements += matches.length;
        console.log(`‚úÖ ${pattern.description}: ${matches.length} –∑–∞–º–µ–Ω`);
      }
    });
    
    // –£–±–µ–¥–∏–º—Å—è —á—Ç–æ path –º–æ–¥—É–ª—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω
    if (replacements > 0) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∏–º–ø–æ—Ä—Ç path
      if (!content.includes('require("path")') && !content.includes('require(\'path\')') && 
          !content.includes('import path') && !content.includes('import * as path')) {
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç path –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞
        content = `const path = require('path');\n` + content;
        console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è path');
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
      fs.writeFileSync(indexJsPath, content, 'utf-8');
      console.log(`üéâ –£—Å–ø–µ—à–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ ${replacements} –ø—Ä–æ–±–ª–µ–º —Å import.meta.dirname`);
      
      // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
      const backupPath = indexJsPath + '.backup';
      if (!fs.existsSync(backupPath)) {
        fs.writeFileSync(backupPath, fs.readFileSync(indexJsPath, 'utf-8'), 'utf-8');
        console.log('üíæ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: index.js.backup');
      }
      
    } else {
      console.log('‚ÑπÔ∏è  –ü—Ä–æ–±–ª–µ–º—ã —Å import.meta.dirname –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }
    
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞:', error.message);
    return false;
  }
}

// –ó–∞–ø—É—Å–∫ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
if (require.main === module) {
  const distPath = process.argv[2] || './dist';
  
  console.log('üöÄ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å import.meta.dirname –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω');
  console.log(`üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${path.resolve(distPath)}`);
  
  if (fixImportMetaDirname(distPath)) {
    console.log('‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
    process.exit(0);
  } else {
    console.log('‚ùå –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å');
    process.exit(1);
  }
}

module.exports = { fixImportMetaDirname };