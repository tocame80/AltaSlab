#!/usr/bin/env node

/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å import.meta.dirname –≤ –ø—Ä–æ–¥–∞–∫—à–Ω —Å–±–æ—Ä–∫–µ
 * –ó–∞–º–µ–Ω—è–µ—Ç –≤—Å–µ –≤—Ö–æ–∂–¥–µ–Ω–∏—è import.meta.dirname –Ω–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π –∫–æ–¥
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

// ES modules —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç __dirname
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

function fixImportMetaDirname(distPath) {
  const indexJsPath = path.join(distPath, 'index.js');
  
  if (!fs.existsSync(indexJsPath)) {
    console.log('‚ùå –§–∞–π–ª dist/index.js –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return false;
  }

  console.log('üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—É —Å import.meta.dirname...');
  
  try {
    let content = fs.readFileSync(indexJsPath, 'utf-8');
    
    // –°—á–µ—Ç—á–∏–∫ –∑–∞–º–µ–Ω
    let replacements = 0;
    
    // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∑–∞–º–µ–Ω—ã import.meta.dirname
    const patterns = [
      // –ü—Ä—è–º–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ import.meta.dirname
      {
        search: /import\.meta\.dirname/g,
        replace: '(__dirname || path.dirname(new URL(import.meta.url).pathname))',
        description: 'import.meta.dirname -> —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π __dirname'
      },
      
      // path.resolve(import.meta.dirname, ...)
      {
        search: /path\.resolve\(\s*import\.meta\.dirname\s*,([^)]+)\)/g,
        replace: 'path.resolve(__dirname || path.dirname(new URL(import.meta.url).pathname), $1)',
        description: 'path.resolve —Å import.meta.dirname'
      },
      
      // –í–∞—Ä–∏–∞–Ω—Ç –¥–ª—è —Å–ª—É—á–∞–µ–≤ –≥–¥–µ dirname —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω
      {
        search: /path\.dirname\(fileURLToPath\(import\.meta\.url\)\)/g,
        replace: '(__dirname || path.dirname(new URL(import.meta.url).pathname))',
        description: '—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π ES modules __dirname fallback'
      },
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞
      {
        search: /path\.resolve\(\s*void\s+0\s*,([^)]+)\)/g,
        replace: 'path.resolve(__dirname || path.dirname(new URL(import.meta.url).pathname), $1)',
        description: 'path.resolve(void 0, ...) -> –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ undefined'
      },
      
      // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è undefined –≤ –ø–µ—Ä–≤–æ–º –∞—Ä–≥—É–º–µ–Ω—Ç–µ path.resolve
      {
        search: /path\.resolve\(\s*undefined\s*,([^)]+)\)/g,
        replace: 'path.resolve(__dirname || path.dirname(new URL(import.meta.url).pathname), $1)',
        description: 'path.resolve(undefined, ...) -> –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ undefined'
      },
      
      // –ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –±—ã–ª–∞ undefined
      {
        search: /path\.resolve\(\s*([a-zA-Z_$][a-zA-Z0-9_$]*)\s*,([^)]+)\)/g,
        replace: (match, varName, rest) => {
          if (varName === '__dirname') return match; // –ù–µ –∑–∞–º–µ–Ω—è–µ–º –µ—Å–ª–∏ —É–∂–µ __dirname
          return `path.resolve((${varName} || __dirname || path.dirname(new URL(import.meta.url).pathname)), ${rest})`;
        },
        description: 'path.resolve(variable, ...) -> –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ fallback'
      },
      
      // –ó–∞—â–∏—Ç–∞ –¥–ª—è —Å–ª—É—á–∞–µ–≤ –∫–æ–≥–¥–∞ path –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω
      {
        search: /(\w+)\.resolve\(/g,
        replace: (match, pathVar) => {
          if (pathVar === 'path') return match;
          return `(${pathVar} || path).resolve(`;
        },
        description: '–∑–∞—â–∏—Ç–∞ –æ—Ç undefined path –æ–±—ä–µ–∫—Ç–∞'
      }
    ];
    
    patterns.forEach(pattern => {
      const searchPattern = pattern.search;
      const replaceValue = pattern.replace;
      
      if (typeof replaceValue === 'function') {
        // –î–ª—è —Ñ—É–Ω–∫—Ü–∏–π –∑–∞–º–µ–Ω—ã
        const matches = [...content.matchAll(searchPattern)];
        if (matches.length > 0) {
          content = content.replace(searchPattern, replaceValue);
          replacements += matches.length;
          console.log(`‚úÖ ${pattern.description}: ${matches.length} –∑–∞–º–µ–Ω`);
        }
      } else {
        // –î–ª—è —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –∑–∞–º–µ–Ω
        const matches = content.match(searchPattern);
        if (matches) {
          content = content.replace(searchPattern, replaceValue);
          replacements += matches.length;
          console.log(`‚úÖ ${pattern.description}: ${matches.length} –∑–∞–º–µ–Ω`);
        }
      }
    });
    
    // –£–±–µ–¥–∏–º—Å—è —á—Ç–æ path –º–æ–¥—É–ª—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –∏ URL –¥–æ—Å—Ç—É–ø–µ–Ω
    if (replacements > 0) {
      let needsPathImport = false;
      let needsUrlImport = false;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∏–º–ø–æ—Ä—Ç path (CommonJS –∏–ª–∏ ES)
      if (!content.includes('require("path")') && !content.includes('require(\'path\')') && 
          !content.includes('import path') && !content.includes('import * as path')) {
        needsPathImport = true;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∏–º–ø–æ—Ä—Ç URL (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∑–∞–º–µ–Ω–µ)
      if (content.includes('new URL(import.meta.url)') && 
          !content.includes('require("url")') && !content.includes('require(\'url\')') &&
          !content.includes('import { URL }') && !content.includes('import * as url') &&
          !content.includes('import url')) {
        needsUrlImport = true;
      }
      
      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ CommonJS –∏–º–ø–æ—Ä—Ç—ã –µ—Å–ª–∏ –æ–Ω–∏ –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞
      if (content.startsWith('const { URL } = require(\'url\');\n')) {
        content = content.replace(/^const { URL } = require\('url'\);\n/, '');
        console.log('üßπ –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π CommonJS –∏–º–ø–æ—Ä—Ç URL');
      }
      if (content.startsWith('const path = require(\'path\');\n')) {
        content = content.replace(/^const path = require\('path'\);\n/, '');
        console.log('üßπ –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π CommonJS –∏–º–ø–æ—Ä—Ç path');
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã –≤ ES —Å—Ç–∏–ª–µ
      let imports = '';
      if (needsPathImport) {
        imports += 'import path from \'path\';\n';
        console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω ES –∏–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è path');
      }
      if (needsUrlImport) {
        imports += 'import { URL } from \'url\';\n';
        console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω ES –∏–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è URL');
      }
      
      if (imports) {
        content = imports + content;
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
      fs.writeFileSync(indexJsPath, content, 'utf-8');
      console.log(`üéâ –£—Å–ø–µ—à–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ ${replacements} –ø—Ä–æ–±–ª–µ–º —Å import.meta.dirname`);
      
      // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
      const backupPath = indexJsPath + '.backup';
      if (!fs.existsSync(backupPath)) {
        fs.writeFileSync(backupPath, fs.readFileSync(indexJsPath, 'utf-8'), 'utf-8');
        console.log('üíæ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: index.js.backup');
      }
      
    } else {
      console.log('‚ÑπÔ∏è  –ü—Ä–æ–±–ª–µ–º—ã —Å import.meta.dirname –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }
    
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞:', error.message);
    return false;
  }
}

// –ó–∞–ø—É—Å–∫ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ (ES modules)
const isMainModule = import.meta.url === `file://${process.argv[1]}` || 
                     import.meta.url === new URL(process.argv[1], 'file://').href;

if (isMainModule) {
  const distPath = process.argv[2] || './dist';
  
  console.log('üöÄ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å import.meta.dirname –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω');
  console.log(`üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${path.resolve(distPath)}`);
  
  if (fixImportMetaDirname(distPath)) {
    console.log('‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
    process.exit(0);
  } else {
    console.log('‚ùå –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å');
    process.exit(1);
  }
}

export { fixImportMetaDirname };