import { Octokit } from '@octokit/rest';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

let connectionSettings;

async function getAccessToken() {
  if (connectionSettings && connectionSettings.settings.expires_at && new Date(connectionSettings.settings.expires_at).getTime() > Date.now()) {
    return connectionSettings.settings.access_token;
  }
  
  const hostname = process.env.REPLIT_CONNECTORS_HOSTNAME
  const xReplitToken = process.env.REPL_IDENTITY 
    ? 'repl ' + process.env.REPL_IDENTITY 
    : process.env.WEB_REPL_RENEWAL 
    ? 'depl ' + process.env.WEB_REPL_RENEWAL 
    : null;

  if (!xReplitToken) {
    throw new Error('X_REPLIT_TOKEN not found for repl/depl');
  }

  connectionSettings = await fetch(
    'https://' + hostname + '/api/v2/connection?include_secrets=true&connector_names=github',
    {
      headers: {
        'Accept': 'application/json',
        'X_REPLIT_TOKEN': xReplitToken
      }
    }
  ).then(res => res.json()).then(data => data.items?.[0]);

  const accessToken = connectionSettings?.settings?.access_token || connectionSettings.settings?.oauth?.credentials?.access_token;

  if (!connectionSettings || !accessToken) {
    throw new Error('GitHub not connected');
  }
  return accessToken;
}

async function getUncachableGitHubClient() {
  const accessToken = await getAccessToken();
  return new Octokit({ auth: accessToken });
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±–∏–Ω–∞—Ä–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
function isBinaryFile(filename) {
  const binaryExts = [
    '.png', '.jpg', '.jpeg', '.gif', '.webp', '.ico', '.bmp', '.tiff',
    '.pdf', '.doc', '.docx', '.xls', '.xlsx', '.ppt', '.pptx',
    '.zip', '.rar', '.7z', '.tar', '.gz', '.exe', '.dll', '.so',
    '.woff', '.woff2', '.ttf', '.eot', '.otf',
    '.mp3', '.wav', '.ogg', '.mp4', '.avi', '.mov', '.wmv'
  ];
  
  const ext = path.extname(filename).toLowerCase();
  return binaryExts.includes(ext);
}

async function getAllFiles(dirPath, basePath = '') {
  const files = [];
  const items = await fs.promises.readdir(dirPath, { withFileTypes: true });

  for (const item of items) {
    const fullPath = path.join(dirPath, item.name);
    const relativePath = path.join(basePath, item.name);

    if (item.isDirectory()) {
      // Skip excluded directories
      const excludedDirs = [
        'node_modules', '.git', 'dist', '.replit', '.upm', 
        'build', 'coverage', '.next', '.nuxt', '.cache',
        'tmp', 'temp', 'logs', '.turbo', '.parcel-cache',
        '.thumbnail-cache', '.local', '.pythonlibs'
      ];
      
      if (!excludedDirs.includes(item.name)) {
        const subFiles = await getAllFiles(fullPath, relativePath);
        files.push(...subFiles);
      }
    } else if (item.isFile()) {
      // Skip certain file types and patterns
      const ext = path.extname(item.name).toLowerCase();
      const excludedExts = [
        '.lock', '.log', '.tmp', '.cache', '.pid', '.seed', '.coverage',
        '.nyc_output', '.grunt', '.bower_components', '.lock-wscript',
        '.wafpickle-*', '.compiled', '.eslintcache', '.stylelintcache'
      ];
      
      const excludedFiles = [
        '.DS_Store', 'Thumbs.db', '.env.local', '.env.*.local',
        'npm-debug.log*', 'yarn-debug.log*', 'yarn-error.log*',
        'lerna-debug.log*', '.pnpm-debug.log*', 'repl.nix'
      ];

      const shouldInclude = !excludedExts.includes(ext) && 
                           !excludedFiles.includes(item.name) &&
                           !item.name.startsWith('.') &&
                           !item.name.includes('node_modules');

      if (shouldInclude) {
        try {
          const stats = await fs.promises.stat(fullPath);
          // Skip very large files (>1MB)
          if (stats.size < 1024 * 1024) {
            const isBinary = isBinaryFile(item.name);
            
            if (isBinary) {
              const content = await fs.promises.readFile(fullPath);
              files.push({
                path: relativePath.replace(/\\/g, '/'),
                content: content.toString('base64'),
                encoding: 'base64',
                type: 'binary',
                size: stats.size
              });
            } else {
              const content = await fs.promises.readFile(fullPath, 'utf8');
              files.push({
                path: relativePath.replace(/\\/g, '/'),
                content: content,
                encoding: 'utf-8',
                type: 'text',
                size: stats.size
              });
            }
          } else {
            console.log(`‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫ –±–æ–ª—å—à–æ–≥–æ —Ñ–∞–π–ª–∞: ${relativePath} (${Math.round(stats.size / 1024)}KB)`);
          }
        } catch (error) {
          console.log(`‚ö†Ô∏è  –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ${relativePath}: ${error.message}`);
        }
      }
    }
  }

  return files;
}

// –°–æ–∑–¥–∞–Ω–∏–µ –±–ª–æ–±–æ–≤ –¥–ª—è –±–∏–Ω–∞—Ä–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
async function createBlobsForBinaryFiles(octokit, owner, repo, files) {
  const binaryFiles = files.filter(f => f.type === 'binary');
  const blobMap = new Map();
  
  console.log(`üì¶ –°–æ–∑–¥–∞–Ω–∏–µ ${binaryFiles.length} –±–ª–æ–±–æ–≤ –¥–ª—è –±–∏–Ω–∞—Ä–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...`);
  
  // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è rate limit
  const BATCH_SIZE = 10;
  
  for (let i = 0; i < binaryFiles.length; i += BATCH_SIZE) {
    const batch = binaryFiles.slice(i, i + BATCH_SIZE);
    
    await Promise.all(batch.map(async (file, idx) => {
      try {
        const { data: blob } = await octokit.rest.git.createBlob({
          owner,
          repo,
          content: file.content,
          encoding: 'base64'
        });
        
        blobMap.set(file.path, blob.sha);
        
        if ((i + idx + 1) % 50 === 0) {
          console.log(`üì¶ –°–æ–∑–¥–∞–Ω–æ –±–ª–æ–±–æ–≤: ${i + idx + 1}/${binaryFiles.length}`);
        }
        
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–ª–æ–±–∞ –¥–ª—è ${file.path}:`, error.message);
      }
    }));
    
    // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
    if (i + BATCH_SIZE < binaryFiles.length) {
      await new Promise(resolve => setTimeout(resolve, 200));
    }
  }
  
  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${blobMap.size} –±–ª–æ–±–æ–≤ –∏–∑ ${binaryFiles.length}`);
  return blobMap;
}

// –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ä–µ–≤–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π base_tree –∏ chunking
async function createTreeInChunks(octokit, owner, repo, files, blobMap, baseTreeSha = null) {
  const CHUNK_SIZE = 500; // –ú–µ–Ω—å—à–∏–π —Ä–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è 502 –æ—à–∏–±–∫–∏
  const treeEntries = [];
  
  // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –¥–µ—Ä–µ–≤–∞
  files.forEach(file => {
    if (file.type === 'binary' && blobMap.has(file.path)) {
      treeEntries.push({
        path: file.path,
        mode: '100644',
        type: 'blob',
        sha: blobMap.get(file.path)
      });
    } else if (file.type === 'text') {
      treeEntries.push({
        path: file.path,
        mode: '100644',
        type: 'blob',
        content: file.content
      });
    }
  });
  
  console.log(`üå≥ –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ä–µ–≤–∞ –∏–∑ ${treeEntries.length} —Ñ–∞–π–ª–æ–≤ –ø–æ —á–∞—Å—Ç—è–º...`);
  
  // –ï—Å–ª–∏ —Ñ–∞–π–ª–æ–≤ –º–∞–ª–æ, —Å–æ–∑–¥–∞–µ–º –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
  if (treeEntries.length <= CHUNK_SIZE) {
    const { data: tree } = await octokit.rest.git.createTree({
      owner,
      repo,
      tree: treeEntries,
      ...(baseTreeSha && { base_tree: baseTreeSha })
    });
    return tree.sha;
  }
  
  // –ò–Ω–∞—á–µ —Å–æ–∑–¥–∞–µ–º –ø–æ —á–∞—Å—Ç—è–º
  let currentTreeSha = baseTreeSha;
  
  for (let i = 0; i < treeEntries.length; i += CHUNK_SIZE) {
    const chunk = treeEntries.slice(i, i + CHUNK_SIZE);
    
    console.log(`üå≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Å—Ç–∏ ${Math.floor(i / CHUNK_SIZE) + 1}/${Math.ceil(treeEntries.length / CHUNK_SIZE)} (${chunk.length} —Ñ–∞–π–ª–æ–≤)...`);
    
    try {
      const { data: tree } = await octokit.rest.git.createTree({
        owner,
        repo,
        tree: chunk,
        ...(currentTreeSha && { base_tree: currentTreeSha })
      });
      
      currentTreeSha = tree.sha;
      
      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —á–∞–Ω–∫–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 500));
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Å—Ç–∏ –¥–µ—Ä–µ–≤–∞:`, error.message);
      throw error;
    }
  }
  
  return currentTreeSha;
}

async function uploadToGitHub() {
  try {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ GitHub...');
    
    const octokit = await getUncachableGitHubClient();
    
    // Get user info and repo details
    const { data: user } = await octokit.rest.users.getAuthenticated();
    console.log(`üëã –ü—Ä–∏–≤–µ—Ç, ${user.login}!`);
    
    // Repository info  
    const repoOwner = 'tocame80';
    const repoName = 'AltaSlab';
    
    // Get repository details
    const { data: repo } = await octokit.rest.repos.get({
      owner: repoOwner,
      repo: repoName
    });
    const defaultBranch = repo.default_branch;
    console.log(`üì¶ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–∞–π–¥–µ–Ω: ${repo.full_name} (–≤–µ—Ç–∫–∞: ${defaultBranch})`);
    
    console.log('üìÇ –°–æ–±–∏—Ä–∞–µ–º —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞...');
    const projectRoot = path.resolve(__dirname, '..');
    const files = await getAllFiles(projectRoot);
    
    const textFiles = files.filter(f => f.type === 'text');
    const binaryFiles = files.filter(f => f.type === 'binary');
    
    console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${files.length} (—Ç–µ–∫—Å—Ç: ${textFiles.length}, –±–∏–Ω–∞—Ä–Ω—ã–µ: ${binaryFiles.length})`);
    
    // Get current branch info
    let currentCommitSha;
    let currentTreeSha;
    
    try {
      const { data: ref } = await octokit.rest.git.getRef({
        owner: repoOwner,
        repo: repoName,
        ref: `heads/${defaultBranch}`
      });
      currentCommitSha = ref.object.sha;
      
      const { data: commit } = await octokit.rest.git.getCommit({
        owner: repoOwner,
        repo: repoName,
        commit_sha: currentCommitSha
      });
      currentTreeSha = commit.tree.sha;
      
      console.log(`üåø –¢–µ–∫—É—â–∏–π –∫–æ–º–º–∏—Ç: ${currentCommitSha.substring(0, 8)}`);
    } catch (error) {
      console.log('üÜï –°–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π (–Ω–µ—Ç –∫–æ–º–º–∏—Ç–æ–≤)');
    }
    
    // Create blobs for binary files
    const blobMap = await createBlobsForBinaryFiles(octokit, repoOwner, repoName, files);
    
    // Create tree in chunks
    const finalTreeSha = await createTreeInChunks(octokit, repoOwner, repoName, files, blobMap, currentTreeSha);
    
    // Create commit
    console.log('üíæ –°–æ–∑–¥–∞–µ–º –∫–æ–º–º–∏—Ç...');
    const { data: commit } = await octokit.rest.git.createCommit({
      owner: repoOwner,
      repo: repoName,
      message: 'üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞ –ê–õ–¨–¢–ê –°–õ–≠–ë\n\n- –û–±–Ω–æ–≤–ª–µ–Ω—ã –≤—Å–µ —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞\n- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å TimeWeb\n- –î–æ–±–∞–≤–ª–µ–Ω—ã —Å–∫—Ä–∏–ø—Ç—ã –¥–µ–ø–ª–æ—è –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n- –ì–æ—Ç–æ–≤ –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é –≤ –ø—Ä–æ–¥–∞–∫—à–Ω',
      tree: finalTreeSha,
      parents: currentCommitSha ? [currentCommitSha] : []
    });
    
    // Update branch reference
    console.log(`üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ç–∫—É ${defaultBranch}...`);
    await octokit.rest.git.updateRef({
      owner: repoOwner,
      repo: repoName,
      ref: `heads/${defaultBranch}`,
      sha: commit.sha
    });
    
    console.log('‚úÖ –ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ GitHub!');
    console.log(`üîó –°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: https://github.com/${repoOwner}/${repoName}`);
    console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:`);
    console.log(`  ‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤: ${textFiles.length}`);
    console.log(`  ‚Ä¢ –ë–∏–Ω–∞—Ä–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: ${binaryFiles.length}`);
    console.log(`  ‚Ä¢ –ë–ª–æ–±–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: ${blobMap.size}`);
    console.log(`  ‚Ä¢ –ù–æ–≤—ã–π –∫–æ–º–º–∏—Ç: ${commit.sha.substring(0, 8)}`);
    console.log('\nüìù –û–±–Ω–æ–≤–ª–µ–Ω–æ:');
    console.log('1. ‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
    console.log('2. ‚úÖ –°–∫—Ä–∏–ø—Ç—ã –¥–µ–ø–ª–æ—è –¥–ª—è TimeWeb –≥–æ—Ç–æ–≤—ã');
    console.log('3. ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ Node.js –¥–æ–±–∞–≤–ª–µ–Ω—ã');
    console.log('4. ‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤–∫–ª—é—á–µ–Ω–∞');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ:', error.message);
    if (error.response?.data) {
      console.error('üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.response.data);
    }
    if (error.stack) {
      console.error('üìç Stack trace:', error.stack);
    }
    process.exit(1);
  }
}

// Run the upload
uploadToGitHub();